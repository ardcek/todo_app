import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:todo_app/core/theme/app_theme.dart';
import 'package:todo_app/core/theme/theme_controller.dart';
import 'package:todo_app/l10n/l10n.dart';
import 'package:todo_app/features/tasks/models/task.dart';
import 'package:todo_app/features/tasks/presentation/task_card.dart';
import 'package:todo_app/features/tasks/presentation/task_list_notifier.dart';

class TaskListScreen extends ConsumerWidget {
  const TaskListScreen({super.key});



  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final l10n = L10n.of(context);
    final tasksAsync = ref.watch(taskListNotifierProvider);
    final filter = ref.watch(taskListNotifierProvider.notifier).currentFilter;
    final sort = ref.watch(taskListNotifierProvider.notifier).currentSort;



    return Scaffold(
      appBar: AppBar(
        title: Text(l10n.tasks),

        actions: [
          IconButton(
            icon: Icon(ref.watch(themeControllerProvider) ? Icons.light_mode : Icons.dark_mode),
            onPressed: () {
              ref.read(themeControllerProvider.notifier).toggleTheme();
            },
          ),

          IconButton(          IconButton(

            icon: const Icon(Icons.language),            icon: const Icon(Icons.language),

            onPressed: () {            onPressed: () {

              context.go('/settings/language');              context.go('/settings/language');

            },            },

          ),          ),

          PopupMenuButton<TaskFilter>(          PopupMenuButton<TaskFilter>(

            icon: const Icon(Icons.filter_list),            icon: const Icon(Icons.filter_list),

            initialValue: filter,            initialValue: filter,

            onSelected: (filter) {            onSelected: (filter) {

              ref.read(taskListNotifierProvider.notifier).setFilter(filter);              ref.read(taskListNotifierProvider.notifier).setFilter(filter);

            },            },

            itemBuilder: (context) => [            itemBuilder: (context) => [

              PopupMenuItem(              PopupMenuItem(

                value: TaskFilter.all,                value: TaskFilter.all,

                child: Text(l10n.all),                child: Text(l10n.all),

              ),              ),

              PopupMenuItem(              PopupMenuItem(

                value: TaskFilter.active,                value: TaskFilter.active,

                child: Text(l10n.incomplete),                child: Text(l10n.incomplete),

              ),              ),

              PopupMenuItem(              PopupMenuItem(

                value: TaskFilter.completed,                value: TaskFilter.completed,

                child: Text(l10n.completed),                child: Text(l10n.completed),

              ),              ),

            ],            ],

          ),          ),

          PopupMenuButton<TaskSort>(          PopupMenuButton<TaskSort>(

            icon: const Icon(Icons.sort),            icon: const Icon(Icons.sort),

            initialValue: sort,            initialValue: sort,

            onSelected: (sort) {            onSelected: (sort) {

              ref.read(taskListNotifierProvider.notifier).setSort(sort);              ref.read(taskListNotifierProvider.notifier).setSort(sort);

            },            },

            itemBuilder: (context) => [            itemBuilder: (context) => [

              const PopupMenuItem(              const PopupMenuItem(

                value: TaskSort.priority,                value: TaskSort.priority,

                child: Text('Priority'),                child: Text('Priority'),

              ),              ),

              PopupMenuItem(              PopupMenuItem(

                value: TaskSort.dueDate,                value: TaskSort.dueDate,

                child: Text(l10n.taskDueDate),                child: Text(l10n.taskDueDate),

              ),              ),

              PopupMenuItem(              PopupMenuItem(

                value: TaskSort.created,                value: TaskSort.created,

                child: Text('Created'),                child: Text('Created'),

              ),              ),

              PopupMenuItem(              PopupMenuItem(

                value: TaskSort.alphabetical,                value: TaskSort.alphabetical,

                child: Text('A-Z'),                child: Text('A-Z'),

              ),              ),

            ],            ],

          ),          ),

        ],        ],

      ),      ),

      body: tasksAsync.when(      body: tasksAsync.when(

        loading: () => const Center(        loading: () => const Center(

          child: CircularProgressIndicator(          child: CircularProgressIndicator(

            valueColor: AlwaysStoppedAnimation<Color>(AppTheme.primaryColor),            valueColor: AlwaysStoppedAnimation<Color>(AppTheme.primaryColor),

          ),          ),

        ),        ),

        error: (error, stack) => Center(        error: (error, stack) => Center(

          child: Column(          child: Column(

            mainAxisAlignment: MainAxisAlignment.center,            mainAxisAlignment: MainAxisAlignment.center,

            children: [            children: [

              const Icon(              const Icon(

                Icons.error_outline,                Icons.error_outline,

                color: AppTheme.errorColor,                color: AppTheme.errorColor,

                size: 48,                size: 48,

              ),              ),

              const SizedBox(height: 16),              const SizedBox(height: 16),

              Text(              Text(

                'Error: $error',                'Error: $error',

                style: const TextStyle(color: AppTheme.errorColor),                style: const TextStyle(color: AppTheme.errorColor),

              ),              ),

            ],            ],

          ),          ),

        ),        ),

        data: (tasks) => tasks.isEmpty        data: (tasks) => tasks.isEmpty

            ? Center(            ? Center(

                child: Column(                child: Column(

                  mainAxisAlignment: MainAxisAlignment.center,                  mainAxisAlignment: MainAxisAlignment.center,

                  children: [                  children: [

                    Icon(                    Icon(

                      Icons.task_outlined,                      Icons.task_outlined,

                      size: 64,                      size: 64,

                      color: Colors.grey[400],                      color: Colors.grey[400],

                    ),                    ),

                    const SizedBox(height: 16),                    const SizedBox(height: 16),

                    Text(                    Text(

                      l10n.noTasks,                      l10n.noTasks,

                      style: TextStyle(                      style: TextStyle(

                        fontSize: 20,                        fontSize: 20,

                        color: Colors.grey[600],                        color: Colors.grey[600],

                        fontWeight: FontWeight.w500,                        fontWeight: FontWeight.w500,

                      ),                      ),

                    ),                    ),

                    const SizedBox(height: 8),                    const SizedBox(height: 8),

                    Text(                    Text(

                      l10n.addYourFirstTask,                      l10n.addYourFirstTask,

                      style: TextStyle(                      style: TextStyle(

                        color: Colors.grey[500],                        color: Colors.grey[500],

                      ),                      ),

                    ),                    ),

                  ],                  ],

                ),                ),

              )              )

            : ListView.builder(            : ListView.builder(

                key: const PageStorageKey('taskList'),                key: const PageStorageKey('taskList'),

                padding: const EdgeInsets.only(bottom: 80),                padding: const EdgeInsets.only(bottom: 80),

                itemCount: tasks.length,                itemCount: tasks.length,

                itemBuilder: (context, index) {                itemBuilder: (context, index) {

                  final task = tasks[index];                  final task = tasks[index];

                  return Dismissible(                  return Dismissible(

                    key: ValueKey(task.id),                key: ValueKey(task.id),

                    direction: DismissDirection.horizontal,                direction: DismissDirection.horizontal,

                    onDismissed: (direction) {                onDismissed: (direction) {

                      if (direction == DismissDirection.endToStart) {                  if (direction == DismissDirection.endToStart) {

                        ref                    ref

                            .read(taskListNotifierProvider.notifier)                        .read(taskListNotifierProvider.notifier)

                            .deleteTask(task);                        .deleteTask(task);

                      } else {                  } else {

                        ref                    ref

                            .read(taskListNotifierProvider.notifier)                        .read(taskListNotifierProvider.notifier)

                            .toggleTaskCompleted(task);                        .toggleTaskCompleted(task);

                      }                  }

                    },                },

                    background: Container(                background: Container(

                      decoration: const BoxDecoration(                  decoration: const BoxDecoration(

                        color: Colors.green,                    color: Colors.green,

                        borderRadius: BorderRadius.all(Radius.circular(12)),                    borderRadius: BorderRadius.all(Radius.circular(12)),

                      ),                  ),

                      alignment: Alignment.centerLeft,                  alignment: Alignment.centerLeft,

                      padding: const EdgeInsets.only(left: 24),                  padding: const EdgeInsets.only(left: 24),

                      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),                  margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),

                      child: const Icon(Icons.check_circle_outline, color: Colors.white),                  child: const Icon(Icons.check_circle_outline, color: Colors.white),

                    ),                ),

                    secondaryBackground: Container(                secondaryBackground: Container(

                      decoration: BoxDecoration(                  decoration: BoxDecoration(

                        color: AppTheme.errorColor,                    color: AppTheme.errorColor,

                        borderRadius: const BorderRadius.all(Radius.circular(12)),                    borderRadius: const BorderRadius.all(Radius.circular(12)),

                      ),                  ),

                      alignment: Alignment.centerRight,                  alignment: Alignment.centerRight,

                      padding: const EdgeInsets.only(right: 24),                  padding: const EdgeInsets.only(right: 24),

                      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),                  margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),

                      child: const Icon(Icons.delete_outline, color: Colors.white),                  child: const Icon(Icons.delete_outline, color: Colors.white),

                    ),                ),

                    child: TaskCard(                child: TaskCard(

                      task: task,                  task: task,

                      onTap: () => context.go('/task/edit', extra: task),                  onTap: () => context.go('/task/edit', extra: task),

                      onCheckboxChanged: (value) {                  onCheckboxChanged: (value) {

                        ref                    ref

                            .read(taskListNotifierProvider.notifier)                        .read(taskListNotifierProvider.notifier)

                            .toggleTaskCompleted(task);                        .toggleTaskCompleted(task);

                      },                  },

                    ),                ),

                  );              );

                },            },

              ),          );

      ),      ),

      floatingActionButton: FloatingActionButton(      floatingActionButton: FloatingActionButton(

        onPressed: () => context.go('/task/new'),        onPressed: () => context.go('/task/new'),

        child: const Icon(Icons.add),        child: const Icon(Icons.add),

      ),      ),

    );    );

  }  }

}}